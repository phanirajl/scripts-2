#!/bin/bash
# Execute this script from the same directyory where your cassandra.yaml is located
# You may change parameters/passwords to suit your neeeds
# By default, a set of keys is created for all nodes
#
#
# Variable used in more than one function
#
CN="dseNode"
#
# Functions
#
function SslCerts(){
#
# KEYSTORE SECTION
# ================
# Generate a private and public key pair on each node of the cluster.
# Use an alias that identifies the node
# Output file is in .keystore
#
OU="Operations"
O="Acme"
L="Malvern PA"
C="US"
keytool -genkey -keyalg RSA -alias ${CN} -keystore .keystore -storepass cassandra -keypass cassandra -dname "CN=${CN}, OU=${E}, O=${O}, L=${L}, C=${C}"
#
# Export the public part to node0.cer
# FILE node0.cer WILL BE USED LATER FOR CQLSHRC
#
keytool -export -noprompt -alias ${CN} -file ${CN}.cer -keystore .keystore -keypass cassandra << !
cassandra
!
#
# FOR SIMPLICITY, WE HAVE ONLY ONE KEYSTORE/TRUSTSTORE
# HOWEVER, EACH NODE COULD HAVE HAVE IT'S OWN TRUSTSTORE.
# IN THAT CASE, REPEAT THE STEPS ABOVE ON node1, node2, etc
#
#
# TRUSTSTORE SECTION
# ==================
# Import the public key to the node0
# output file is in .truststore
#
keytool -import -v -trustcacerts -alias ${CN} -file ${CN}.cer -keystore .truststore << !
cassandra
cassandra
yes
!
#
# IN CASE EACH NODE HAS IT'S OWN KEYSTORE, THEN IMPORT ALL OF THE PUBLIC KEYS FROM ALL NODES
# INTO THE KEYSTORE.  IN THE END, ALL NODES SHOULD HAVE THE SAME KEYSTORE
#
#
# CQLSH SECTION
# =============
# cqlsh does not work with the certificate in the format generated.
# openssl is used to generate a PEM file of the certificate with no keys, node0.cer.pem
# Then a PEM file of the key with no certificate, node0.key.pem.
# First, the keystore is imported in PKCS12 format to a destination keystore, node0.p12, in the example.
# This is followed by the two commands that convert create the two PEM files.
# THE PEM FILES ARE THE ONES USED FOR CQLSHRC CLIENT AUTH!!!!!
# node0.cer.pem
# node0.key.pem
#
keytool -importkeystore -srckeystore .keystore -destkeystore .keystore.p12 -deststoretype PKCS12 -srcstorepass cassandra -deststorepass cassandra
openssl pkcs12 -in .keystore.p12 -nokeys         -out ${CN}.cer.pem -passin pass:cassandra
openssl pkcs12 -in .keystore.p12 -nodes -nocerts -out ${CN}.key.pem -passin pass:cassandra
#
# Close the permissions
#
chmod 644 .truststore .keystore* *.pem
}
#
# MAIN
#
main(){
rm -f .truststore .keystore* ${CN}.cer*
SslCerts > /dev/null 2>&1
[ "$?" -gt 0 ]  && echo "ERROR: Failure while creating certs, exiting" && exit 1
echo "Certifictes, .keystore & .truststore were created at $(pwd)"
echo "Backing up configuration..."
cp cassandra.yaml cassandra.$(date "+%Y%m%d_%H%M%S").yaml
[ "$?" -gt 0 ]  && echo "ERROR: Failed to backup config file, exiting" && exit 1
#
# Node encryption options
#
svr_enc=$(sed -n '/^server_encryption_options:/,/require_client_auth:/p' cassandra.yaml | wc -l)
echo "server_encryption_options:
      internode_encryption: all
      keystore: /etc/dse/cassandra/.keystore
      keystore_password: cassandra
      truststore: /etc/dse/cassandra/.truststore
      truststore_password: cassandra
      # More advanced defaults below:
      protocol: TLS
      algorithm: SunX509
      store_type: JKS
      cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA]
      require_client_auth: true" > svr_enc_opts.txt
if [ "${svr_enc}" -gt 0 ] && [ "${svr_enc}" -le 12 ]; then
   echo "Updating server_encription_options on cassandra.yaml..."
   start=$(awk '/^server_encryption_options:/{print NR}' cassandra.yaml)
   sed -i '/^server_encryption_options:/,/require_client_auth:/d' cassandra.yaml
   sed -i "${start}rsvr_enc_opts.txt" cassandra.yaml
   rm -f svr_enc_opts.txt
else
   echo "Non stadard node encryption configuration found"
   echo "Manually update cassandra.yaml with these options:"
   cat svr_enc_opts.txt
fi
#
# Client encryption options
#
clt_enc=$(sed -n '/^client_encryption_options:/,/cipher_suites:/p' cassandra.yaml | wc -l)
echo "client_encryption_options:
     enabled: true
     # If enabled and optional is set to true encrypted and unencrypted connections are handled.
     optional: false
     keystore: /etc/dse/cassandra/.keystore
     keystore_password: cassandra
     require_client_auth: true
     # Set trustore and truststore_password if require_client_auth is true
     truststore: /etc/dse/cassandra/.truststore
     truststore_password: cassandra
     # More advanced defaults below:
     protocol: TLS
     algorithm: SunX509
     store_type: JKS
     cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA]" > clt_enc_opts.txt
if [ "${clt_enc}" -gt 0 ] && [ "${clt_enc}" -le 15 ]; then
   echo "Updating client_encription_options on cassandra.yaml..."
   start=$(awk '/^client_encryption_options:/{print NR}' cassandra.yaml)
   sed -i '/^client_encryption_options:/,/cipher_suites:/d' cassandra.yaml
   sed -i "${start}rclt_enc_opts.txt" cassandra.yaml
   rm -f clt_enc_opts.txt
else
   echo "Non stadard client encryption configuration found"
   echo "Manually update cassandra.yaml with these options:"
   cat clt_enc_opts.txt
fi
#
# CQLSHRC options
#
cqlshrc="
[connection]
hostname = 127.0.0.1
port = 9042
factory = cqlshlib.ssl.ssl_transport_factory
[ssl]
certfile = /etc/dse/cassandra/${CN}.cer.pem
validate = true
userkey  = /etc/dse/cassandra/${CN}.key.pem
usercert = /etc/dse/cassandra/${CN}.cer.pem"

if [ ! -f ~/.cassandra/cqlshrc ]; then
   mkdir -p ~/.cassandra
   echo "${cqlshrc}" > ~/.cassandra/cqlshrc
else
   echo "Also use the pem files for ~/.cassandra/cqlshrc: "
   echo "${cqlshrc}"
fi
}
#
# Execution
#
main
